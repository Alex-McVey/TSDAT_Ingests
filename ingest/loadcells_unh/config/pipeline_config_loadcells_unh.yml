pipeline:
  # The 'pipeline' section defines some high-level parameters that are mostly just used
  # to name the files that this pipeline produces. Our file naming conventions dictate
  # that output (processed) files are named like:
  # <location_id>.<dataset_name>[-qualifier][-temporal].<data_level>.<YYYYMMDD>.<HHMMSS>.<extension>

  type: Ingest
  location_id: "unh"
  dataset_name: "modaq_group_loadcells"
  # qualifier: ""
  # temporal: ""
  data_level: "b1" # If not applying any QC this should be set to "a1"

# --------------------------------------------------------------------------------------

dataset_definition:
  # The 'dataset_definition' section describes the metadata and variable structure that
  # the output dataset will take. This section is based on the netCDF standard such that
  # for each output dataset there are global attributes, dimensions, coordinate
  # variables, and data variables. The actual structure the output dataset takes is
  # determined by the output FileHandler selected in the storage configuration file (by
  # default it is netCDF, so the structure and metadata here is preserved).

  attributes:
    # The 'attributes' section defines the global attributes that will appear in the
    # output dataset. It is recommended to include at least the attributes listed below
    # in your configuration files, and we always encourage adding more information that
    # helps your users understand the context in which the data were obtained.
    title: "MODAQ Group LoadCells"
    description: "Ingest for the UNH Living Bridge MODAQ results. Specifically MODAQ files matching the _LoadCells file convention."
    conventions: MHKiT-Cloud Data Standards v. 1.0
    institution: Pacific Northwest National Laboratory
    code_url: https://github.com/tsdat/ingest-template
    location_meaning: "UNH Living Bridge"

  dimensions:
    # The 'dimensions' section defines the shape of your dataset. It is expected that
    # 'time' is always a dimension, but you may have as many additional dimensions as
    # you would like.
    time:
      length: unlimited

  variables:
    # The 'variables' section defines the metadata and retrieval rules for measurements
    # that are reported in your output dataset. Each variable configuration block
    # consists of 3-5 main components:
    #
    # 1) input [optional] - tells tsdat how the variable should be retrieved. You can
    # leave this out if you want to populate the variable's data manually.
    # 2) data [optional] - used to set the variable's data directly in this config file,
    # which is useful for scalar properties (like altitude or lat/lon).
    # 3) dims – tells tsdat what shape this data has.
    # 4) type – this is the np.dtype of the variable.
    # 5) attrs – metadata that describes this variable.
    #
    # You can leave off both items 1 and 2 to have tsdat initialize the variable as an
    # empty array. This is useful if you want to add data to your output file that isn't
    # directly retrieved from the input dataset.

    time:
      # The time coordinate variable is required in every dataset processed by tsdat
      input:
        name: Time
        converter:
          classname: tsdat.utils.converters.StringTimeConverter
          parameters:
            timezone: EST
            time_format: "%Y-%m-%d %H:%M:%S"

      dims: [time] # 'time' is a coordinate variable, so it is dimensioned by 'time'

      # 'time' should be a 'long' data type, since in this case it is the number of
      # seconds since 1970, which is very common and standard way to represent time.
      type: long

      attrs:
        long_name: Time (EST)
        standard_name: time
        units: seconds since 1970-01-01T00:00:00

    #-----------------------------------------------------------------
    # LoadCell0
    #-----------------------------------------------------------------
    LoadCell0: # Variable name as it will appear in the processed data
      input:
        # Name of the variable in the raw data
        name: "LoadCell0"

        # Units of the variable in the raw data
        units: "kN"

      # The shape of this variable
      dims: [time]

      # The data type of the variable.  Can be one of:
      # [byte, ubyte, char, short, ushort, int32 (or int), uint32 (or uint),
      # int64 (or long), uint64 (or ulong), float, double, string]
      type: double

      attrs:
        # A minimal description of what the variable represents.
        long_name: "Unknown Force"

        # A CFUnits-compatible string indicating the units the data
        # are measured in.
        # https://cfconventions.org/Data/cf-conventions/cf-conventions-1.8/cf-conventions.html#units
        units: "kN"

        # The value used to initialize the variable’s data. Defaults to -9999.
        # Coordinate variables must not use this attribute.
        _FillValue: -9999

        # A two-element array of [min, max] representing the smallest and largest valid values
        # of a variable.  Values outside valid_range will be filled with _FillValue.
        valid_range: [-1.0, 1.0]

    #-----------------------------------------------------------------
    # LoadCell1
    #-----------------------------------------------------------------
    LoadCell1: # Variable name as it will appear in the processed data
      input:
        # Name of the variable in the raw data
        name: "LoadCell1"

        # Units of the variable in the raw data
        units: "kN"

      # The shape of this variable
      dims: [time]

      # The data type of the variable.  Can be one of:
      # [byte, ubyte, char, short, ushort, int32 (or int), uint32 (or uint),
      # int64 (or long), uint64 (or ulong), float, double, string]
      type: double

      attrs:
        # A minimal description of what the variable represents.
        long_name: "Unknown Force"

        # A CFUnits-compatible string indicating the units the data
        # are measured in.
        # https://cfconventions.org/Data/cf-conventions/cf-conventions-1.8/cf-conventions.html#units
        units: "kN"

        # The value used to initialize the variable’s data. Defaults to -9999.
        # Coordinate variables must not use this attribute.
        _FillValue: -9999

        # A two-element array of [min, max] representing the smallest and largest valid values
        # of a variable.  Values outside valid_range will be filled with _FillValue.
        valid_range: [-1.0, 1.0]

    #-----------------------------------------------------------------
    # LoadCell2
    #-----------------------------------------------------------------
    LoadCell2: # Variable name as it will appear in the processed data
      input:
        # Name of the variable in the raw data
        name: "LoadCell2"

        # Units of the variable in the raw data
        units: "lbf"

      # The shape of this variable
      dims: [time]

      # The data type of the variable.  Can be one of:
      # [byte, ubyte, char, short, ushort, int32 (or int), uint32 (or uint),
      # int64 (or long), uint64 (or ulong), float, double, string]
      type: double

      attrs:
        # A minimal description of what the variable represents.
        long_name: "Unknown Force"

        # A CFUnits-compatible string indicating the units the data
        # are measured in.
        # https://cfconventions.org/Data/cf-conventions/cf-conventions-1.8/cf-conventions.html#units
        units: "lbf"

        # The value used to initialize the variable’s data. Defaults to -9999.
        # Coordinate variables must not use this attribute.
        _FillValue: -9999

        # A two-element array of [min, max] representing the smallest and largest valid values
        # of a variable.  Values outside valid_range will be filled with _FillValue.
        valid_range: [-500.0, 500.0]

    #-----------------------------------------------------------------
    # LoadCell3
    #-----------------------------------------------------------------
    LoadCell3: # Variable name as it will appear in the processed data
      input:
        # Name of the variable in the raw data
        name: "LoadCell3"

      # The shape of this variable
      dims: [time]

      # The data type of the variable.  Can be one of:
      # [byte, ubyte, char, short, ushort, int32 (or int), uint32 (or uint),
      # int64 (or long), uint64 (or ulong), float, double, string]
      type: double

      attrs:
        # A minimal description of what the variable represents.
        long_name: "Unknown"

        # The value used to initialize the variable’s data. Defaults to -9999.
        # Coordinate variables must not use this attribute.
        _FillValue: -9999

        # A two-element array of [min, max] representing the smallest and largest valid values
        # of a variable.  Values outside valid_range will be filled with _FillValue.
        valid_range: [0.0, 0.1]

# --------------------------------------------------------------------------------------

quality_management:
  # This section of the pipeline configuration file is all about detecting and managing
  # data quality issues. Each config block has three main sections:
  #
  # 1) checker - tells tsdat what QualityChecker to use to detect quality issues
  # 2) handlers - tells tsdat which QualityHandler(s) to use to handle quality issues
  # 3) variables / exclude - tells tsdat which variables should be checked

  manage_missing_coordinates:
    checker:
      # Tells tsdat which QualityChecker should be used to identify quality issues. Here
      # we use the built-in CheckMissing class in the tsdat.qc.checkers module.
      classname: tsdat.qc.checkers.CheckMissing
    handlers:
      # Tells tsdat which QualityHandler(s) should be used to handle quality issues. In
      # this case we only use one handler, which fails the pipeline.
      - classname: tsdat.qc.handlers.FailPipeline
    variables:
      # COORDS is a keyword which tells tsdat to only run this quality manager for
      # coordinate variables, which are just variables that also are dimensions. In this
      # dataset 'time' is the only coordinate variable.
      - COORDS

  manage_coordinate_monotonicity:
    checker:
      classname: tsdat.qc.checkers.CheckMonotonic
    handlers:
      - classname: tsdat.qc.handlers.SortDatasetByCoordinate
        parameters:
          ascending: True
          correction: "Coordinate data was sorted in order to ensure monotonicity."
    variables:
      - COORDS

  manage_missing_values:
    checker:
      classname: tsdat.qc.checkers.CheckMissing

    handlers:
      # The RemoveFailedValues handler replaces values that are missing with the
      # variable's _FillValue (from CF Conventions), which defaults to -9999. Xarray and
      # other netCDF libraries will interpret this as a NaN.
      - classname: tsdat.qc.handlers.RemoveFailedValues

      # For each variable the RecordQualityResults handler is applied to, a qc variable
      # is created (or updated, if it exists) whose purpose is to track the specific
      # test(s) and data indexes that failed. It uses a bit-packing approach to store
      # the results of tests.
      - classname: tsdat.qc.handlers.RecordQualityResults
        parameters:
          bit: 1
          assessment: Bad
          meaning: "Value is equal to _FillValue or NaN"

    variables:
      # DATA_VARS is a keyword which tells tsdat to only run this quality manager for
      # data variables, which are all non-coordinate variables are dimensions. In this
      # dataset 'example_var', 'latitude', 'longitude', and 'altitude' are all data
      # variables
      - DATA_VARS

  mhkit_qc_demo:
    checker:
      classname: ingest.loadcells_unh.pipeline.qc.StagnantDataChecker
    handlers:
      - classname: ingest.loadcells_unh.pipeline.qc.StagnantDataHandler
    variables:
      - DATA_VARS
